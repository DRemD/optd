#!/bin/bash

# Create the public version of the ORI-maintained list of POR, from:
# - best_coordinates_known_so_far.csv
# - dump_from_geonames.csv
# - dump_from_crb_city.csv
#
# => ori_por_public.csv
#

##
# Temporary path
TMP_DIR="/tmp/por"

##
# Path of the executable: set it to empty when this is the current directory.
EXEC_PATH=`dirname $0`
# Trick to get the actual full-path
pushd ${EXEC_PATH} > /dev/null
EXEC_FULL_PATH=`popd`
popd > /dev/null
EXEC_FULL_PATH=`echo ${EXEC_FULL_PATH} | sed -e 's|~|'${HOME}'|'`
#
CURRENT_DIR=`pwd`
if [ ${CURRENT_DIR} -ef ${EXEC_PATH} ]
then
	EXEC_PATH="."
	TMP_DIR="."
fi
EXEC_PATH="${EXEC_PATH}/"
TMP_DIR="${TMP_DIR}/"

if [ ! -d ${TMP_DIR} -o ! -w ${TMP_DIR} ]
then
	\mkdir -p ${TMP_DIR}
fi

##
# Sanity check: that (executable) script should be located in the ORI/ sub-directory
# of the OpenTravelData project Git clone
EXEC_DIR_NAME=`basename ${EXEC_FULL_PATH}`
if [ "${EXEC_DIR_NAME}" != "ORI" ]
then
	echo
	echo "[$0:$LINENO] Inconsistency error: this script ($0) should be located in the refdata/ORI/ sub-directory of the OpenTravelData project Git clone, but apparently is not. EXEC_FULL_PATH=\"${EXEC_FULL_PATH}\""
	echo
	exit -1
fi

##
# OpenTravelData directory
OPTD_DIR=`dirname ${EXEC_FULL_PATH}`
OPTD_DIR="${OPTD_DIR}/"

##
# ORI sub-directories
ORI_DIR=${OPTD_DIR}ORI/
TOOLS_DIR=${OPTD_DIR}tools/

##
# Log level
LOG_LEVEL=3

##
# Initial
ORI_POR_FILE=best_coordinates_known_so_far.csv
ORI_ONLY_POR_FILE=ori_only_por.csv

##
# PageRank values
ORI_PR_FILE=ref_airport_pageranked.csv

##
# Geonames (to be found, as temporary files, within the ../tools directory)
GEONAME_RAW_FILENAME=dump_from_geonames.csv
#
GEONAME_RAW_FILE=${TOOLS_DIR}${GEONAME_RAW_FILENAME}
# Geonames with primary key (generated by the
# ../tools/prepare_geonames_dump_file.sh script)
GEONAME_WPK_FILENAME=wpk_${GEONAME_RAW_FILENAME}
#
GEONAME_WPK_FILE=${TOOLS_DIR}${GEONAME_WPK_FILENAME}
# Sorted and cut (also generated by the above script)
GEONAME_SORTED_FILENAME=sorted_${GEONAME_WPK_FILENAME}
GEONAME_CUT_SORTED_FILENAME=cut_${GEONAME_SORTED_FILENAME}
#
GEONAME_SORTED_FILE=${TOOLS_DIR}${GEONAME_SORTED_FILENAME}
GEONAME_CUT_SORTED_FILE=${TOOLS_DIR}${GEONAME_CUT_SORTED_FILENAME}

##
# RFD (to be found, as temporary files, within the ../tools directory)
RFD_RAW_FILENAME=dump_from_crb_city.csv
#
RFD_RAW_FILE=${TOOLS_DIR}${RFD_RAW_FILENAME}
# RFD with primary key (generated by the
# ../tools/prepare_rfd_dump_file.sh script)
RFD_WPK_FILENAME=wpk_${RFD_RAW_FILENAME}
#
RFD_WPK_FILE=${TOOLS_DIR}${RFD_WPK_FILENAME}
# Sorted and cut (also generated by the above script)
RFD_SORTED_FILENAME=sorted_${RFD_WPK_FILENAME}
RFD_CUT_SORTED_FILENAME=cut_${RFD_SORTED_FILE}
#
RFD_SORTED_FILE=${TOOLS_DIR}${RFD_SORTED_FILENAME}
RFD_CUT_SORTED_FILE=${TOOLS_DIR}${RFD_CUT_SORTED_FILENAME}

##
# Target (generated files)
ORI_POR_PUBLIC_FILE=ori_por_public.csv
ORI_ONLY_POR_NEW_FILE=${ORI_ONLY_POR_FILE}.new

##
# Temporary
ORI_POR_WITH_GEO=${ORI_POR_FILE}.withgeo
ORI_POR_WITH_GEORFD=${ORI_POR_FILE}.withgeorfd
ORI_POR_WITH_GEORFDALT=${ORI_POR_FILE}.withgeorfdalt
ORI_POR_WITH_NO_CTY_NAME=${ORI_POR_FILE}.withnoctyname
GEONAME_RAW_FILE_TMP=${GEONAME_RAW_FILE}.alt


##
# Sanity check
if [ ! -d ${TOOLS_DIR} ]
then
	echo
	echo "[$0:$LINENO] The tools/ sub-directory ('${TOOLS_DIR}') does not exist or is not accessible."
	echo "Check that your Git clone of the OpenTravelData is complete."
	echo
	exit -1
fi
if [ ! -f ${TOOLS_DIR}prepare_geonames_dump_file.sh ]
then
	echo
	echo "[$0:$LINENO] The Geonames dump file preparation script ('${TOOLS_DIR}prepare_geonames_dump_file.sh') does not exist or is not accessible."
	echo "Check that your Git clone of the OpenTravelData is complete."
	echo
	exit -1
fi
if [ ! -f ${TOOLS_DIR}prepare_rfd_dump_file.sh ]
then
	echo
	echo "[$0:$LINENO] The RFD file preparation script ('${TOOLS_DIR}prepare_rfd_dump_file.sh') does not exist or is not accessible."
	echo "Check that your Git clone of the OpenTravelData is complete."
	echo
	exit -1
fi

##
#
if [ "$1" = "--clean" ]
then
	\rm -f ${ORI_POR_WITH_GEO} ${ORI_ONLY_POR_NEW_FILE} \
		${ORI_POR_WITH_GEORFD} ${ORI_POR_WITH_GEORFDALT} ${ORI_POR_WITH_NO_CTY_NAME} \
		${GEONAME_WPK_FILE} ${GEONAME_RAW_FILE_TMP} \
		${GEONAME_SORTED_FILE} ${GEONAME_CUT_SORTED_FILE} \
		${RFD_SORTED_FILE} ${RFD_CUT_SORTED_FILE} \
		${ORI_ONLY_POR_NEW_FILE}

	echo "Changing to the ${TOOLS_DIR} directory"
	pushd ${TOOLS_DIR} > /dev/null
	bash prepare_geonames_dump_file.sh --clean || exit -1
	bash prepare_rfd_dump_file.sh --clean || exit -1
	BACK_DIR=`popd`
	popd > /dev/null
	echo "Back to the ${BACK_DIR} directory"
	exit
fi

##
# Preparation
echo "Changing to the ${TOOLS_DIR} directory"
pushd ${TOOLS_DIR} > /dev/null
bash prepare_geonames_dump_file.sh ${OPTD_DIR} ${LOG_LEVEL} || exit -1
bash prepare_rfd_dump_file.sh ${OPTD_DIR} ${RFD_RAW_FILE} ${LOG_LEVEL} || exit -1
BACK_DIR=`popd`
popd > /dev/null
echo "Back to the ${BACK_DIR} directory"

##
#
if [ ! -f ${GEONAME_SORTED_FILE} ]
then
	echo
	echo "[$0:$LINENO] The '${GEONAME_SORTED_FILE}' file does not exist."
	echo
	exit -1
fi
if [ ! -f ${RFD_SORTED_FILE} ]
then
	echo
	echo "[$0:$LINENO] The '${RFD_SORTED_FILE}' file does not exist."
	echo
	exit -1
fi

##
# Save the extra alternate names (from field #33 onwards)
cut -d'^' -f1,33- ${GEONAME_SORTED_FILE} > ${GEONAME_RAW_FILE_TMP}
# Remove the extra alternate names (see the line above)
cut -d'^' -f1-32 ${GEONAME_SORTED_FILE} > ${GEONAME_CUT_SORTED_FILE}

##
# Aggregate all the data sources into a single file
#
# ${ORI_POR_FILE} (best_coordinates_known_so_far.csv) and
# ${GEONAME_CUT_SORTED_FILE} (../tools/cut_sorted_wpk_dump_from_geonames.csv)
# are joined on the primary key (i.e., IATA code - location type):
join -t'^' -a 1 -1 1 -2 1 ${ORI_POR_FILE} ${GEONAME_CUT_SORTED_FILE} > ${ORI_POR_WITH_GEO}

# ${ORI_POR_WITH_GEO} (best_coordinates_known_so_far.csv.withgeo) and
# ${GEONAME_CUT_SORTED_FILE} (sorted_wpk_dump_from_crb_city.csv) are joined on
# the primary key (i.e., IATA code - location type):
join -t'^' -a 1 -1 1 -2 1 ${ORI_POR_WITH_GEO} ${RFD_SORTED_FILE} > ${ORI_POR_WITH_GEORFD}

# ${ORI_POR_WITH_GEORFD} (best_coordinates_known_so_far.csv.withgeorfd) and
# ${GEONAME_RAW_FILE_TMP} (../tools/dump_from_geonames.csv.alt) are joined on
# the primary key (i.e., IATA code - location type):
join -t'^' -a 1 -1 1 -2 1 ${ORI_POR_WITH_GEORFD} ${GEONAME_RAW_FILE_TMP} > ${ORI_POR_WITH_GEORFDALT}

##
# Suppress the redundancies. See ${REDUCER} for more details and samples.
REDUCER=make_ori_por_public.awk
awk -F'^' -v non_ori_por_file="${ORI_ONLY_POR_FILE}" -f ${REDUCER} \
	${ORI_PR_FILE} ${ORI_POR_WITH_GEORFDALT} > ${ORI_POR_WITH_NO_CTY_NAME}
#echo "head ${ORI_POR_WITH_GEORFDALT} ${ORI_POR_WITH_NO_CTY_NAME}"

##
# Write the UTF8 and ASCII names of the city served by every travel-related
# point of reference (POR)
CITY_WRITER=add_city_name.awk
awk -F'^' -f ${CITY_WRITER} ${ORI_POR_WITH_NO_CTY_NAME} ${ORI_POR_WITH_NO_CTY_NAME} \
	> ${ORI_POR_PUBLIC_FILE}

##
# Reporting
#
echo
echo "Reporting Step"
echo "--------------"
echo
echo "wc -l ${ORI_POR_FILE} ${ORI_POR_PUBLIC_FILE} ${ORI_POR_WITH_GEO} ${ORI_POR_WITH_GEORFD} ${ORI_POR_WITH_GEORFDALT} ${ORI_POR_WITH_NO_CTY_NAME}"
if [ -f ${ORI_ONLY_POR_NEW_FILE} ]
then
	NB_LINES_ORI_ONLY=`wc -l ${ORI_ONLY_POR_NEW_FILE}`
	echo
	echo "See also the '${ORI_ONLY_POR_NEW_FILE}' file, which contains ${NB_LINES_ORI_ONLY} lines:"
	echo "less ${ORI_ONLY_POR_NEW_FILE}"
fi
echo
