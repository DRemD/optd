#!/bin/bash

# Create the public version of the ORI-maintained list of POR, from:
# - ori_por_best_known_so_far.csv
# - ref_airport_pageranked.csv
# - ori_tz_light.csv
# - ori_cont.csv
# - dump_from_crb_city.csv
# - dump_from_geonames.csv
#
# => ori_por_public.csv
#

##
# Temporary path
TMP_DIR="/tmp/por"

##
# Path of the executable: set it to empty when this is the current directory.
EXEC_PATH=`dirname $0`
# Trick to get the actual full-path
pushd ${EXEC_PATH} > /dev/null
EXEC_FULL_PATH=`popd`
popd > /dev/null
EXEC_FULL_PATH=`echo ${EXEC_FULL_PATH} | sed -e 's|~|'${HOME}'|'`
#
CURRENT_DIR=`pwd`
if [ ${CURRENT_DIR} -ef ${EXEC_PATH} ]
then
	EXEC_PATH="."
	TMP_DIR="."
fi
# If the Geonames dump file is in the current directory, then the current
# directory is certainly intended to be the temporary directory.
if [ -f ${GEO_RAW_FILENAME} ]
then
	TMP_DIR="."
fi
EXEC_PATH="${EXEC_PATH}/"
TMP_DIR="${TMP_DIR}/"

if [ ! -d ${TMP_DIR} -o ! -w ${TMP_DIR} ]
then
	\mkdir -p ${TMP_DIR}
fi

##
# Sanity check: that (executable) script should be located in the
# tools/ sub-directory of the OpenTravelData project Git clone
EXEC_DIR_NAME=`basename ${EXEC_FULL_PATH}`
if [ "${EXEC_DIR_NAME}" != "tools" ]
then
	echo
	echo "[$0:$LINENO] Inconsistency error: this script ($0) should be located in the refdata/tools/ sub-directory of the OpenTravelData project Git clone, but apparently is not. EXEC_FULL_PATH=\"${EXEC_FULL_PATH}\""
	echo
	exit -1
fi

##
# OpenTravelData directory
OPTD_DIR=`dirname ${EXEC_FULL_PATH}`
OPTD_DIR="${OPTD_DIR}/"

##
# ORI sub-directories
ORI_DIR=${OPTD_DIR}ORI/
TOOLS_DIR=${OPTD_DIR}tools/

##
# Log level
LOG_LEVEL=3

##
# File of best known coordinates
ORI_POR_FILENAME=ori_por_best_known_so_far.csv
ORI_POR_FILE=${ORI_DIR}${ORI_POR_FILENAME}

##
# Light (and inaccurate) version of the country-related time-zones
ORI_TZ_FILENAME=ori_tz_light.csv
ORI_TZ_FILE=${ORI_DIR}${ORI_TZ_FILENAME}
# Mapping between the Countries and their corresponding continent
ORI_CNT_FILENAME=ori_cont.csv
ORI_CNT_FILE=${ORI_DIR}${ORI_CNT_FILENAME}

##
# PageRank values
ORI_PR_FILENAME=ref_airport_pageranked.csv
ORI_PR_FILE=${ORI_DIR}${ORI_PR_FILENAME}

##
# Geonames (to be found, as temporary files, within the ../tools directory)
GEONAME_RAW_FILENAME=dump_from_geonames.csv
#
GEONAME_RAW_FILE=${TOOLS_DIR}${GEONAME_RAW_FILENAME}
# Geonames with primary key (generated by the
# ../tools/prepare_geonames_dump_file.sh script)
GEONAME_WPK_FILENAME=wpk_${GEONAME_RAW_FILENAME}
#
GEONAME_WPK_FILE=${TOOLS_DIR}${GEONAME_WPK_FILENAME}
# Sorted and cut (also generated by the above script)
GEONAME_SORTED_FILENAME=sorted_${GEONAME_WPK_FILENAME}
GEONAME_CUT_SORTED_FILENAME=cut_${GEONAME_SORTED_FILENAME}
#
GEONAME_SORTED_FILE=${TOOLS_DIR}${GEONAME_SORTED_FILENAME}
GEONAME_CUT_SORTED_FILE=${TOOLS_DIR}${GEONAME_CUT_SORTED_FILENAME}

##
# RFD (to be found, as temporary files, within the ../tools directory)
RFD_RAW_FILENAME=dump_from_crb_city.csv
#
RFD_RAW_FILE=${TOOLS_DIR}${RFD_RAW_FILENAME}
# RFD with primary key (generated by the
# ../tools/prepare_rfd_dump_file.sh script)
RFD_WPK_FILENAME=wpk_${RFD_RAW_FILENAME}
#
RFD_WPK_FILE=${TOOLS_DIR}${RFD_WPK_FILENAME}
# Sorted and cut (also generated by the above script)
RFD_SORTED_FILENAME=sorted_${RFD_WPK_FILENAME}
RFD_CUT_SORTED_FILENAME=cut_${RFD_SORTED_FILE}
#
RFD_SORTED_FILE=${TOOLS_DIR}${RFD_SORTED_FILENAME}
RFD_CUT_SORTED_FILE=${TOOLS_DIR}${RFD_CUT_SORTED_FILENAME}

##
# Target (generated files)
ORI_POR_PUBLIC_FILENAME=ori_por_public.csv
ORI_ONLY_POR_FILENAME=ori_only_por.csv
ORI_ONLY_POR_NEW_FILE=${ORI_ONLY_POR_FILE}.new
#
ORI_POR_PUBLIC_FILE=${ORI_DIR}${ORI_POR_PUBLIC_FILENAME}
ORI_ONLY_POR_FILE=${ORI_DIR}${ORI_ONLY_POR_FILENAME}

##
# Temporary
ORI_POR_WITH_NOHD=${ORI_POR_FILE}.wohd
ORI_POR_WITH_GEO=${ORI_POR_FILE}.withgeo
ORI_POR_WITH_GEORFD=${ORI_POR_FILE}.withgeorfd
ORI_POR_WITH_GEORFDALT=${ORI_POR_FILE}.withgeorfdalt
ORI_POR_WITH_NO_CTY_NAME=${ORI_POR_FILE}.withnoctyname
GEONAME_RAW_FILE_TMP=${GEONAME_RAW_FILE}.alt


##
# Sanity check
if [ ! -d ${TOOLS_DIR} ]
then
	echo
	echo "[$0:$LINENO] The tools/ sub-directory ('${TOOLS_DIR}') does not exist or is not accessible."
	echo "Check that your Git clone of the OpenTravelData is complete."
	echo
	exit -1
fi
if [ ! -f ${TOOLS_DIR}prepare_geonames_dump_file.sh ]
then
	echo
	echo "[$0:$LINENO] The Geonames dump file preparation script ('${TOOLS_DIR}prepare_geonames_dump_file.sh') does not exist or is not accessible."
	echo "Check that your Git clone of the OpenTravelData is complete."
	echo
	exit -1
fi
if [ ! -f ${TOOLS_DIR}prepare_rfd_dump_file.sh ]
then
	echo
	echo "[$0:$LINENO] The RFD file preparation script ('${TOOLS_DIR}prepare_rfd_dump_file.sh') does not exist or is not accessible."
	echo "Check that your Git clone of the OpenTravelData is complete."
	echo
	exit -1
fi


##
# Usage helper
#
if [ "$1" = "-h" -o "$1" = "--help" ]
then
	echo
	echo "That script generates the public version of the ORI-maintained list of POR (points of reference)"
	echo
	echo "Usage: $0 [<log level (0: quiet; 5: verbose)>]"
	echo " - Default log level (from 0 to 5): ${LOG_LEVEL}"
	echo
	echo "* Input data files"
	echo "------------------"
	echo " - ORI-maintained file of best known coordinates: '${ORI_POR_FILE}'"
	echo " - ORI-maintained file of PageRanked POR: '${ORI_PR_FILE}'"
	echo " - ORI-maintained file of country-related time-zones: '${ORI_TZ_FILE}'"
	echo " - ORI-maintained file of country-continent mapping: '${ORI_CNT_FILE}'"
	echo " - RFD data dump file: '${RFD_RAW_FILE}'"
	echo " - Geonames data dump file: '${GEONAME_RAW_FILE}'"
	echo
	echo "* Output data file"
	echo "------------------"
	echo " - ORI-maintained public file of POR: '${ORI_POR_PUBLIC_FILE}'"
	echo " - ORI-maintained list of non-IATA/outlier POR: '${ORI_ONLY_POR_FILE}'"
	echo
	exit
fi


##
# Cleaning
#
if [ "$1" = "--clean" ]
then
	\rm -f ${ORI_POR_WITH_GEO} ${ORI_ONLY_POR_NEW_FILE} \
		${ORI_POR_WITH_GEORFD} ${ORI_POR_WITH_GEORFDALT} \
		${ORI_POR_WITH_NO_CTY_NAME} ${ORI_POR_FILE_HEADER} ${ORI_POR_WITH_NOHD} \
		${GEONAME_WPK_FILE} ${GEONAME_RAW_FILE_TMP} \
		${GEONAME_SORTED_FILE} ${GEONAME_CUT_SORTED_FILE} \
		${RFD_SORTED_FILE} ${RFD_CUT_SORTED_FILE} \
		${ORI_ONLY_POR_NEW_FILE}

	bash prepare_geonames_dump_file.sh --clean || exit -1
	bash prepare_rfd_dump_file.sh --clean || exit -1
	exit
fi


##
# Log level
if [ "$1" != "" ]
then
	LOG_LEVEL="$1"
fi


##
# Preparation
bash prepare_geonames_dump_file.sh ${OPTD_DIR} ${LOG_LEVEL} || exit -1
bash prepare_rfd_dump_file.sh ${OPTD_DIR} ${RFD_RAW_FILE} ${LOG_LEVEL} || exit -1

##
#
if [ ! -f ${GEONAME_SORTED_FILE} ]
then
	echo
	echo "[$0:$LINENO] The '${GEONAME_SORTED_FILE}' file does not exist."
	echo
	exit -1
fi
if [ ! -f ${RFD_SORTED_FILE} ]
then
	echo
	echo "[$0:$LINENO] The '${RFD_SORTED_FILE}' file does not exist."
	echo
	exit -1
fi

##
# Save the extra alternate names (from field #34 onwards)
cut -d'^' -f1,34- ${GEONAME_SORTED_FILE} > ${GEONAME_RAW_FILE_TMP}
# Remove the extra alternate names (see the line above)
cut -d'^' -f1-33 ${GEONAME_SORTED_FILE} > ${GEONAME_CUT_SORTED_FILE}

##
# Extract the header into a temporary file
ORI_POR_FILE_HEADER=${ORI_POR_FILE}.tmp.hdr
grep "^pk\(.\+\)" ${ORI_POR_FILE} > ${ORI_POR_FILE_HEADER}

# Remove the header
sed -e "s/^pk\(.\+\)//g" ${ORI_POR_FILE} > ${ORI_POR_WITH_NOHD}
sed -i -e "/^$/d" ${ORI_POR_WITH_NOHD}

##
# Aggregate all the data sources into a single file
#
# ${ORI_POR_FILE} (ori_por_best_known_so_far.csv) and
# ${GEONAME_CUT_SORTED_FILE} (../tools/cut_sorted_wpk_dump_from_geonames.csv)
# are joined on the primary key (i.e., IATA code - location type):
join -t'^' -a 1 -1 1 -2 1 ${ORI_POR_WITH_NOHD} ${GEONAME_CUT_SORTED_FILE} \
	> ${ORI_POR_WITH_GEO}

# ${ORI_POR_WITH_GEO} (ori_por_best_known_so_far.csv.withgeo) and
# ${GEONAME_CUT_SORTED_FILE} (sorted_wpk_dump_from_crb_city.csv) are joined on
# the primary key (i.e., IATA code - location type):
join -t'^' -a 1 -1 1 -2 1 ${ORI_POR_WITH_GEO} ${RFD_SORTED_FILE} \
	> ${ORI_POR_WITH_GEORFD}

# ${ORI_POR_WITH_GEORFD} (ori_por_best_known_so_far.csv.withgeorfd) and
# ${GEONAME_RAW_FILE_TMP} (../tools/dump_from_geonames.csv.alt) are joined on
# the primary key (i.e., IATA code - location type):
join -t'^' -a 1 -1 1 -2 1 ${ORI_POR_WITH_GEORFD} ${GEONAME_RAW_FILE_TMP} \
	> ${ORI_POR_WITH_GEORFDALT}

##
# Suppress the redundancies. See ${REDUCER} for more details and samples.
REDUCER=make_ori_por_public.awk
awk -F'^' -v non_ori_por_file="${ORI_ONLY_POR_FILE}" -f ${REDUCER} \
	${ORI_PR_FILE} ${ORI_TZ_FILE} ${ORI_CNT_FILE} ${ORI_POR_WITH_GEORFDALT} \
	> ${ORI_POR_WITH_NO_CTY_NAME}

##
# Write the UTF8 and ASCII names of the city served by every travel-related
# point of reference (POR)
CITY_WRITER=add_city_name.awk
awk -F'^' -f ${CITY_WRITER} \
	${ORI_POR_WITH_NO_CTY_NAME} ${ORI_POR_WITH_NO_CTY_NAME} \
	> ${ORI_POR_PUBLIC_FILE}

##
# Remove the header
\rm -f ${ORI_POR_FILE_HEADER}

##
# Reporting
#
echo
echo "Reporting Step"
echo "--------------"
echo
echo "wc -l ${ORI_POR_FILE} ${ORI_POR_PUBLIC_FILE} ${ORI_POR_WITH_GEO} ${ORI_POR_WITH_GEORFD} ${ORI_POR_WITH_GEORFDALT} ${ORI_POR_WITH_NO_CTY_NAME}"
if [ -f ${ORI_ONLY_POR_NEW_FILE} ]
then
	NB_LINES_ORI_ONLY=`wc -l ${ORI_ONLY_POR_NEW_FILE}`
	echo
	echo "See also the '${ORI_ONLY_POR_NEW_FILE}' file, which contains ${NB_LINES_ORI_ONLY} lines:"
	echo "less ${ORI_ONLY_POR_NEW_FILE}"
fi
echo
