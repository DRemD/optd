#!/bin/bash

##
# That Shell script de-duplicates combined POR (point of reference) entries
# when Geonames has got the full details for every location type of the combined
# entry. For instance, a 'CA' (city and airport) entry may be split into a city
# and an airport when Geonames knows about those two POR individually:
# they can therefore be distinguished. The input data files are:
# - ../ORI/best_coordinates_known_so_far.csv
# - dump_from_geonames.csv
#
# The generated file is:
# => ori_por_to_be_split.csv
#

##
# Temporary path
TMP_DIR="/tmp/por"

##
# Path of the executable: set it to empty when this is the current directory.
EXEC_PATH=`dirname $0`
# Trick to get the actual full-path
pushd ${EXEC_PATH} > /dev/null
EXEC_FULL_PATH=`popd`
popd > /dev/null
EXEC_FULL_PATH=`echo ${EXEC_FULL_PATH} | sed -e 's|~|'${HOME}'|'`
#
CURRENT_DIR=`pwd`
if [ ${CURRENT_DIR} -ef ${EXEC_PATH} ]
then
	EXEC_PATH="."
	TMP_DIR="."
fi
EXEC_PATH="${EXEC_PATH}/"
TMP_DIR="${TMP_DIR}/"

if [ ! -d ${TMP_DIR} -o ! -w ${TMP_DIR} ]
then
	\mkdir -p ${TMP_DIR}
fi

##
# Log level
LOG_LEVEL=3

##
# OpenTravelData directory
OPTD_DIR=`dirname ${EXEC_FULL_PATH}`
OPTD_DIR="${OPTD_DIR}/"

##
# ORI sub-directories
ORI_DIR=${OPTD_DIR}ORI/
TOOLS_DIR=${OPTD_DIR}tools/

##
# Log level
LOG_LEVEL=2

##
# Initial
ORI_POR_FILENAME=best_coordinates_known_so_far.csv
ORI_POR_FILE=${ORI_DIR}${ORI_POR_FILENAME}

##
# Geonames (to be found, as temporary files, within the ../tools directory)
GEONAME_RAW_FILENAME=dump_from_geonames.csv
#
GEONAME_RAW_FILE=${TOOLS_DIR}${GEONAME_RAW_FILENAME}
# Geonames with primary key (generated by the
# ../tools/prepare_geonames_dump_file.sh script)
GEONAME_WPK_FILENAME=wpk_${GEONAME_RAW_FILENAME}
#
GEONAME_WPK_FILE=${TOOLS_DIR}${GEONAME_WPK_FILENAME}
# Sorted and cut (also generated by the above script)
GEONAME_SORTED_FILENAME=sorted_${GEONAME_WPK_FILENAME}
GEONAME_CUT_SORTED_FILENAME=cut_${GEONAME_SORTED_FILENAME}
#
GEONAME_SORTED_FILE=${TOOLS_DIR}${GEONAME_SORTED_FILENAME}
GEONAME_CUT_SORTED_FILE=${TOOLS_DIR}${GEONAME_CUT_SORTED_FILENAME}

##
# Target (generated files)
ORI_POR_TOBESPLIT_FILE=ori_por_to_be_split.csv


##
# Sanity check
if [ ! -d ${TOOLS_DIR} ]
then
	echo
	echo "[$0:$LINENO] The tools/ sub-directory ('${TOOLS_DIR}') does not exist or is not accessible."
	echo "Check that your Git clone of the OpenTravelData is complete."
	echo
	exit -1
fi
if [ ! -f ${TOOLS_DIR}prepare_geonames_dump_file.sh ]
then
	echo
	echo "[$0:$LINENO] The Geonames dump file preparation script ('${TOOLS_DIR}prepare_geonames_dump_file.sh') does not exist or is not accessible."
	echo "Check that your Git clone of the OpenTravelData is complete."
	echo
	exit -1
fi


##
# Usage helper
#
if [ "$1" = "-h" -o "$1" = "--help" ]
then
	echo
	echo "That script generates a list of de-duplicated POR entries for which Geonames has the full details"
	echo
	echo "Usage: $0 [<log level (0: quiet; 5: verbose)>]"
	echo " - Default log level (from 0 to 5): ${LOG_LEVEL}"
	echo
	echo "* Input data files"
	echo "------------------"
	echo " - ORI-maintained file of best known coordinates: '${ORI_POR_FILE}'"
	echo " - Geonames data dump file: '${GEONAME_RAW_FILE}'"
	echo
	echo "* Output data file"
	echo "------------------"
	echo " - ORI-maintained public file of POR: '${ORI_POR_TOBESPLIT_FILE}'"
	echo
	exit
fi


##
# Cleaning
#
if [ "$1" = "--clean" ]
then
	\rm -f ${GEONAME_WPK_FILE} ${GEONAME_SORTED_FILE} ${GEONAME_CUT_SORTED_FILE}

	bash prepare_geonames_dump_file.sh --clean || exit -1
	exit
fi


##
# Log level
#
if [ "$1" != "" ]
then
	LOG_LEVEL="$1"
fi


##
# Preparation
#
bash prepare_geonames_dump_file.sh ${OPTD_DIR} ${LOG_LEVEL} || exit -1

##
#
if [ ! -f ${GEONAME_SORTED_FILE} ]
then
	echo
	echo "[$0:$LINENO] The '${GEONAME_SORTED_FILE}' file does not exist."
	echo
	exit -1
fi


##
# Split the combined POR entries for which Geonames has got the details
# for the individual entries.
SPLITTER=ori_por_splitter.awk
awk -F'^' -v log_level=${LOG_LEVEL} -f ${SPLITTER} \
	${ORI_POR_FILE} ${GEONAME_RAW_FILE} > ${ORI_POR_TOBESPLIT_FILE}

##
# Sanity check #1
# Display the number of occurences for every location types
#  1.1. Extract the primary keys (e.g., IEV-A or IEV-C)
#  1.2. Extract the location type (e.g., A or C)
LOC_TYPE_LIST=`
awk -F'^' '/^([A-Z]{3})-/ {print ($1)}' ${ORI_POR_TOBESPLIT_FILE} \
	| awk -F'-' '{print ($2)}' | sort | uniq -c`

##
# Sanity check #2
# By construction, the generated file should have only de-duplicated entries.
# That is, every IATA code should correspond to at least two POR entries.
#  2.1. Extract the primary keys (e.g., IEV-A or IEV-C)
#  2.2. Extract the IATA codes (e.g., IEV)
#  2.3. Count the occurences of every IATA code (e.g., 2 IEV)
#  2.4. Check the IATA code having just a single entry
#
SINGLE_POR_LIST=`
awk -F'^' '/^([A-Z]{3})-/ {print ($1)}' ${ORI_POR_TOBESPLIT_FILE} \
	| awk -F'-' '{print ($1)}' | sort | uniq -c \
	| awk '{if ($1 != "2") {print ($0)}}'`
if [ "${SINGLE_POR_LIST}" != "" ]
then
	echo
	echo "[$0:$LINENO] List of POR having a single entry for a given IATA code:"
	echo "[$0:$LINENO] ${SINGLE_POR_LIST}"
	echo
	exit -1
fi


##
# Reporting
#
echo
echo "Reporting Step"
echo "--------------"
echo
echo "wc -l ${ORI_POR_FILE}"
if [ -f ${ORI_POR_TOBESPLIT_FILE} ]
then
	NB_LINES_ORI_TOBESPLIT=`wc -l ${ORI_POR_TOBESPLIT_FILE}`
	echo
	echo "See also the '${ORI_POR_TOBESPLIT_FILE}' file, which contains ${NB_LINES_ORI_TOBESPLIT} lines:"
	echo "less ${ORI_POR_TOBESPLIT_FILE}"
	echo
	echo "List of location types for the de-duplicated POR entries:"
	echo "${LOC_TYPE_LIST}"
	echo
fi
echo
